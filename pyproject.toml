[build-system]
requires = ["hatchling>=1.5"]
build-backend = "hatchling.build"

[project]
name = "pytest_check_links"
dynamic = ["version"]
description = "Check links in files"
license = { file = "LICENSE" }
classifiers = [
  "Framework :: Jupyter",
  "Framework :: Pytest",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: BSD License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Topic :: Documentation",
  "Topic :: Documentation :: Sphinx",
  "Topic :: Software Development :: Quality Assurance",
  "Topic :: Software Development :: Testing",
  "Typing :: Typed"
]
keywords = ["testing", "documentation", "links", "html"]
requires-python = ">=3.8"
dependencies = [
  "docutils",
  "html5lib",
  "nbconvert",
  "nbformat",
  "pytest >= 7.0",
  "requests",
]

[[project.authors]]
name = "Jupyter Development Team"
email = "jupyter@googlegroups.com"

[project.readme]
file = "README.md"
content-type = "text/markdown"

[project.urls]
Homepage = "https://github.com/jupyterlab/pytest-check-links"

[project.optional-dependencies]
cache = ["requests-cache>=0.9.7"]
test = ["requests-cache>=0.9.7", "pre-commit", "flaky"]

[project.scripts]
pytest-check-links = "pytest_check_links.__main__:main"

[project.entry-points."pytest11"]
check-links = "pytest_check_links.plugin"

[tool.hatch.version]
path = "pytest_check_links/_version.py"

[tool.hatch.envs.docs]
features = ["docs"]
[tool.hatch.envs.docs.scripts]
build = "make -C docs html SPHINXOPTS='-W'"

[tool.hatch.envs.test]
features = ["test"]
[tool.hatch.envs.test.scripts]
test = "pytest -vv {args}"
nowarn = "test -W default {args}"

[tool.hatch.envs.cov]
features = ["test"]
dependencies = ["coverage[toml]"]
[tool.hatch.envs.cov.scripts]
test = "coverage run -m pytest {args}"
nowarn = "test -W default {args}"

[tool.hatch.envs.typing]
features = ["test"]
dependencies = ["mypy>=1.5.1"]
[tool.hatch.envs.typing.scripts]
test = "mypy --install-types --non-interactive {args}"

[tool.hatch.envs.lint]
dependencies = ["black[jupyter]==23.1.0", "mdformat>0.7", "ruff==0.0.263"]
detached = true
[tool.hatch.envs.lint.scripts]
style = [
  "ruff {args:.}",
  "black --check --diff {args:.}",
  "mdformat --check {args:.}"
]
fmt = [
  "black {args:.}",
  "ruff --fix {args:.}",
  "mdformat {args:.}"
]

[tool.pytest.ini_options]
minversion = "6.0"
xfail_strict = true
log_cli_level = "info"
addopts = [
  "-raXs", "--durations=10", "--color=yes", "--doctest-modules",
   "--showlocals", "--strict-markers", "--strict-config"
]
filterwarnings = [
  "error",
]
testpaths = ["test"]
pytester_example_dir = "examples"

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "if settings.DEBUG",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
  "class .*\bProtocol\\):",
"@(abc\\.)?abstractmethod",
]

[tool.coverage.run]
relative_files = true
source = ["pytest_check_links"]

[tool.mypy]
files = "pytest_check_links"
python_version = "3.8"
strict = true
show_error_codes = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true

[tool.black]
line-length = 100
skip-string-normalization = true
target-version = ["py38"]

[tool.ruff]
target-version = "py38"
line-length = 100
select = [
  "A", "B", "C", "DTZ", "E", "EM", "F", "FBT", "I", "ICN", "ISC", "N",
  "PLC", "PLE", "PLR", "PLW", "Q", "RUF", "S", "SIM", "T", "TID", "UP",
  "W", "YTT",
]
ignore = [
# Q000 Single quotes found but double quotes preferred
"Q000",
# FBT001 Boolean positional arg in function definition
"FBT001", "FBT002", "FBT003",
# E501 Line too long (158 > 100 characters)
"E501",
# SIM105 Use `contextlib.suppress(...)`
"SIM105",
]
unfixable = [
  # Don't touch print statements
  "T201",
  # Don't touch noqa lines
  "RUF100",
]

[tool.ruff.per-file-ignores]
# B011 Do not call assert False since python -O removes these calls
# F841 local variable 'foo' is assigned to but never used
# C408 Unnecessary `dict` call
# E402 Module level import not at top of file
# T201 `print` found
# B007 Loop control variable `i` not used within the loop body.
# N802 Function name `assertIn` should be lowercase
# S101 Use of `assert` detected
"test/*" = ["B011", "F841", "C408", "E402", "T201", "B007", "N802", "S101"]

[tool.interrogate]
ignore-init-module=true
ignore-private=true
ignore-semiprivate=true
ignore-property-decorators=true
ignore-nested-functions=true
ignore-nested-classes=true
fail-under=100
exclude = ["test", "docs"]

[tool.repo-review]
ignore = ["PY004", "PY007", "PP308", "GH102", "PC140", "RTD100"]
